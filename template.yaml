AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
    loop-app

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
    Function:
        Timeout: 20
        Runtime: java11
        MemorySize: 512
        CodeUri: functions/

Resources:

    # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction

    LoopWorkflowTriggerFunction:
        Type: AWS::Serverless::Function
        Properties:
            Handler: com.stephenmatta.workflow.trigger.TriggerRequestHandler::handleRequest
            Policies:
                -   StepFunctionsExecutionPolicy:
                        StateMachineName: !GetAtt LoopWorkflow.Name
            Environment:
                Variables:
                    WORKFLOW_ARN: !Ref LoopWorkflow

    LoopFirstWorkflowFunction:
        Type: AWS::Serverless::Function
        Properties:
            Handler: com.stephenmatta.workflow.firststep.FirstWorkflowHandler::handleRequest

    InvokeAsyncApiFunction:
        Type: AWS::Serverless::Function
        Properties:
            Handler: com.stephenmatta.workflow.apiclient.InvokeAsyncApiHandler::handleRequest
            Environment:
                Variables:
                    LAMBDA_FUNCTION: !Ref AsyncApiFunction
                    TABLE_NAME: !Ref CorrelationTable
            Policies:
                -   LambdaInvokePolicy:
                        FunctionName: !Ref AsyncApiFunction
                -   DynamoDBCrudPolicy:
                        TableName: !Ref CorrelationTable

    AsyncApiFunction:
        Type: AWS::Serverless::Function
        Properties:
            Handler: com.stephenmatta.standalone.asyncapi.AsyncApiHandler::handleRequest
            Environment:
                Variables:
                    TOPIC_ARN: !Ref SnsTopicAsyncComplete
            Policies:
                -   SNSPublishMessagePolicy:
                        TopicName: !GetAtt SnsTopicAsyncComplete.TopicName

    AsyncApiCallbackFunction:
        Type: AWS::Serverless::Function
        Properties:
            Handler: com.stephenmatta.standalone.asyncapi.callback.AsyncApiCallbackHandler::handleRequest
            Environment:
                Variables:
                    TABLE_NAME: !Ref CorrelationTable
            Events:
                SQSEvent:
                    Type: SQS
                    Properties:
                        Queue: !GetAtt SqsQueueAsyncComplete.Arn
                        BatchSize: 1
                        Enabled: true
            Policies:
                -   SQSPollerPolicy:
                        QueueName: !GetAtt SqsQueueAsyncComplete.QueueName
                -   DynamoDBCrudPolicy:
                        TableName: !Ref CorrelationTable
                -   Statement:
                        -   Effect: Allow
                            Action:
                                - states:SendTaskSuccess
                                - states:SendTaskFailure
                                - states:SendTaskHeartbeat
                            Resource: !GetAtt LoopWorkflow.Arn

    LoopWorkflow:
        Type: AWS::Serverless::StateMachine
        Properties:
            Definition: # TODO: externalize
                StartAt: FirstWorkflowState
                States:

                    FirstWorkflowState:
                        Type: Task
                        Resource: !GetAtt LoopFirstWorkflowFunction.Arn
                        Parameters:
                            FunctionName: !GetAtt InvokeAsyncApiFunction.Arn
                        ResultPath: $.data
                        Next: InvokeAsyncApi

                    InvokeAsyncApi:
                        Type: Task
                        Resource: arn:aws:states:::lambda:invoke.waitForTaskToken
                        Parameters:
                            FunctionName: !GetAtt InvokeAsyncApiFunction.Arn
                            Payload:
                                taskToken.$: $$.Task.Token
                        ResultPath: $.async
                        Retry: [ {
                            ErrorEquals: [ "Lambda.ServiceException", "Lambda.AWSLambdaException", "Lambda.SdkClientException" ],
                            IntervalSeconds: 2,
                            MaxAttempts: 6,
                            BackoffRate: 2
                        } ]
                        End: true

            Policies: # Find out more about SAM policy templates: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-policy-templates.html
                -   LambdaInvokePolicy:
                        FunctionName: !Ref LoopFirstWorkflowFunction
                -   LambdaInvokePolicy:
                        FunctionName: !Ref InvokeAsyncApiFunction

    CorrelationTable:
        Type: AWS::Serverless::SimpleTable
        Properties:
            PrimaryKey:
                Name: correlationId
                Type: String

    SnsTopicAsyncComplete:
        Type: AWS::SNS::Topic
        Properties:
            TopicName: loop-async-complete
            Subscription:
                -   Protocol: sqs
                    Endpoint: !GetAtt SqsQueueAsyncComplete.Arn

    SqsQueueAsyncComplete:
        Type: AWS::SQS::Queue
        Properties:
            QueueName: loop-async-complete

    # Policy allows SNS to publish to this SQS queue
    SnsToSqsPolicy:
        Type: AWS::SQS::QueuePolicy
        Properties:
            PolicyDocument:
                Version: "2012-10-17"
                Statement:
                    -   Sid: "Allow SNS publish to SQS"
                        Effect: Allow
                        Principal:
                            Service: "sns.amazonaws.com"
                        Resource: !GetAtt SqsQueueAsyncComplete.Arn
                        Action: SQS:SendMessage
                        Condition:
                            ArnEquals:
                                aws:SourceArn: !Ref SnsTopicAsyncComplete
            Queues:
                -   Ref: SqsQueueAsyncComplete

Outputs:
    # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
    # Find out more about other implicit resources you can reference within SAM
    # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
    #  HelloWorldApi:
    #    Description: "API Gateway endpoint URL for Prod stage for Hello World function"
    #    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/hello/"
    LoopWorkflowTriggerFunction:
        Description: "Hello World Lambda Function ARN"
        Value: !GetAtt LoopWorkflowTriggerFunction.Arn
    LoopWorkflowTriggerFunctionIamRole:
        Description: "Implicit IAM Role created for Hello World function"
        Value: !GetAtt LoopWorkflowTriggerFunction.Arn
